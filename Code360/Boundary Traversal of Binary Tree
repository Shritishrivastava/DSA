bool isleaf(TreeNode<int> *node) {
    return (node->left == nullptr && node->right == nullptr);
}

void addLeftBoundary(TreeNode<int> *root, vector<int>&result){
    TreeNode<int> *curr = root->left;
    while(curr != nullptr){
        if(!isleaf(curr)){
            result.push_back(curr->data);
        }
        if(curr->left != nullptr){
            curr = curr->left;
        }else{
            curr = curr->right;
        }
    } 
}
void addRightBoundary(TreeNode<int> *root, vector<int>&result){
    vector<int>temp;
    TreeNode<int> *curr = root->right;
    while(curr != nullptr){
        if(!isleaf(curr)){
            temp.push_back(curr->data);
        }
        if(curr->right != nullptr){
            curr = curr->right;
        }else{
            curr = curr->left;
        }
    }
    for(int i = temp.size()-1; i >= 0; i--){
        result.push_back(temp[i]);
    }
}
void addLeaves(TreeNode<int> *root, vector<int>&result){
    if(isleaf(root)){
        result.push_back(root->data);
        return;
    }
    if(root->left){
        addLeaves(root->left, result);
    }
    if(root->right){
        addLeaves(root->right, result);
    }
}
vector<int> traverseBoundary(TreeNode<int> *root)
{
     vector<int> result;
	if(root == nullptr){
        return result;
    }
    if(!isleaf(root)){
        result.push_back(root->data);
    }
    addLeftBoundary(root, result);
    addLeaves(root, result);
    addRightBoundary(root, result);
    return result;
}
